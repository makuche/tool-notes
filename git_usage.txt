###################################################
### Git Version Control Usage
###################################################

- Git is a distributed version control system -> Everybody has a local repository
  (central repo is optional) -> Every developer has a backup/copy of the repo on their machine


# Most important commands
git init      # Initialize a git repository
git status    # Check staged files
git add <file>  # Add changed file to stage
git commit -m "<comment>" # Add commit
git pull  # Pull repository branch
git push  # Push current staged files

###################################################

# Configure git
git config --global user.name "First last"          # Set user name
git config --global user.email "email adress"       # Set user email
git config --list                                   # Lists configuration values

# Get help
git help config             # Shows help for a command
git config --help           # Same as above

# Two scenarios:
# 1. Existing project on the machine, that one wants to start to track
# 2. Start developing on an existing remote project

# Basics / First example
git init                # Run this from within the project folder to start tracking
ls -la                  # Shows additional .git directory, contains everything that is
                        # related to the git repo -> If one wants to stop tracking that
                        # project with git, only delete that repo with rm -rf .git
git status              # Shows status of tracking

touch .gitignore        # .gitignore file contains private file that shouldn't be tracked
                        # wildcards can be used, e.g. *.pyc, folders can also be added

### In git, three states exist:
# 1. Working directory (contains untracked changed files, listed with git status)
# 2. Staging area (organizes files/folders that we plan to commit -> make multiple commits
# to organize commit better)
# 3. .git directory/repository

git add <file>                                        # Adds file to staging area
git *                                               # Adds everything to the staging area
git add -A                                          # Adds everything to the staging area
git reset <file>                                      # Removes file from staging area
git reset                                           # Removes everything from staging area
git commit -m "specify here your changes to the code" # Commit staged files with a message
git status          # Now there are no untracked files, therefore the working directory is clean
git log             # Shows commit with its unique hash, author and date

git clone <url> <path_to_clone>         #
git clone ../remote_repo.git .          # Clones all files from remote_repo.git
                                        # dicectory to .

git remote -v           # View information about repository
git branch -a           # Shows local and remote branches

git pull origin master   # Always pull before push, people could have changed the code
                         # in the meanwhile
                         # origin is just the name of the repository, master is the
                         # branch we want to push to
git push origin master   # Pushes local changes to repo, so other people have access to it

git branch <name>         # creates branch with the name "name"
git branch                # lists branches (local?)


## Merging a branch
git checkout <master>       # Switch to branch <master>
git pull origin master      # Get changes
git merge <branch> master   # Merges <branch> and master
git branch --merged         # Shows merged branch
git push origin master
git branch -d <branch>      # Branch can now be deleted